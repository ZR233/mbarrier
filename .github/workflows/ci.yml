name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          # x86 targets
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          # ARM targets
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - arm-unknown-linux-gnueabihf
          # RISC-V targets
          - riscv64gc-unknown-linux-gnu
          - riscv32gc-unknown-linux-gnu
          # Additional targets
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        include:
          - target: x86_64-unknown-linux-gnu
            can_run: true
          - target: i686-unknown-linux-gnu
            can_run: false
          - target: aarch64-unknown-linux-gnu
            can_run: false
          - target: armv7-unknown-linux-gnueabihf
            can_run: false
          - target: arm-unknown-linux-gnueabihf
            can_run: false
          - target: riscv64gc-unknown-linux-gnu
            can_run: false
          - target: riscv32gc-unknown-linux-gnu
            can_run: false
          - target: x86_64-unknown-linux-musl
            can_run: true
          - target: aarch64-unknown-linux-musl
            can_run: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        components: rustfmt, clippy

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
        case ${{ matrix.target }} in
          i686-unknown-linux-gnu)
            sudo apt-get install -y gcc-multilib-i686-linux-gnu
            ;;
          aarch64-unknown-linux-gnu)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
          armv7-unknown-linux-gnueabihf)
            sudo apt-get install -y gcc-arm-linux-gnueabihf
            ;;
          arm-unknown-linux-gnueabihf) 
            sudo apt-get install -y gcc-arm-linux-gnueabihf
            ;;
          riscv64gc-unknown-linux-gnu)
            sudo apt-get install -y gcc-riscv64-linux-gnu
            ;;
          aarch64-unknown-linux-musl)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
        esac

    - name: Build
      run: cargo build --target ${{ matrix.target }} --verbose

    - name: Build with SMP feature
      run: cargo build --target ${{ matrix.target }} --features smp --verbose

    - name: Run tests (if supported)
      if: matrix.can_run
      run: cargo test --target ${{ matrix.target }} --verbose

    - name: Run tests with SMP feature (if supported)
      if: matrix.can_run
      run: cargo test --target ${{ matrix.target }} --features smp --verbose

    - name: Build examples
      run: cargo build --target ${{ matrix.target }} --examples --verbose

    - name: Run examples (if supported)
      if: matrix.can_run
      run: |
        cargo run --target ${{ matrix.target }} --example usage
        cargo run --target ${{ matrix.target }} --example performance
        cargo run --target ${{ matrix.target }} --example asm_analysis

  no-std-test:
    name: No-std compatibility test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - thumbv7em-none-eabihf
          - aarch64-unknown-none
          - riscv32imc-unknown-none-elf
          - riscv64gc-unknown-none-elf
          - x86_64-unknown-none

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Build for no-std target
      run: cargo build --target ${{ matrix.target }} --lib --verbose

    - name: Build for no-std target with SMP feature
      run: cargo build --target ${{ matrix.target }} --lib --features smp --verbose

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: clippy

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Run clippy with SMP feature
      run: cargo clippy --features smp -- -D warnings

  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build documentation
      run: cargo doc --no-deps --verbose

    - name: Build documentation with SMP feature
      run: cargo doc --no-deps --features smp --verbose
